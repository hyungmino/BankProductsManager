<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
MenuMapper 인터페이스의 메소드 호출 시 실행 될 구문을 XML 파일에 기재하는 방법
1. Mapper 인터페이스와 동일한 패키지에 위치해야 한다.
2. Mapper 인터페이스의 풀 네임을 네임스페이스로 지정해야 한다.
3. Mapper 인터페이스와 XML의 이름이 동일해야 한다.
4. 작성한 메소드이 이름과 id가 일치하고, 리턴 타입이 일치하는 쿼리문을 모두 작성해야 한다.
-->
<mapper namespace="bank.ProductMapper">


    <!-- 조회한 컬럼과 DTO를 매핑시키기 위한 설정이다. -->
    <resultMap id="selectAllMenu" type="common.ProductDTO">
        <id property="productCode" column="PRODUCT_CODE"/>   <!-- id는 PK -->
        <result property="productName" column="PRODUCT_NAME"/>    <!-- property에는 MenuDTO의 필드명 일치 -->
        <result property="interestRate" column="PRODUCT_INTEREST_RATE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="period" column="PRODUCT_PERIOD_YEAR"/>
        <result property="age" column="PRODUCT_AGE"/>
        <result property="price" column="PRODUCT_PRICE"/>

    </resultMap>

    <select id="selectAllMenu" resultMap="selectAllMenu">
        <!-- resultMap에 설정한 값을 그대로 가져가 실행하겠다라는 의미 -->
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
        FROM TBL_PRODUCT
        ORDER BY PRODUCT_CODE
    </select>

    <select id="selectDepositAll" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
         <where>
             PRODUCT_NAME LIKE '%' || '예금' || '%'
         </where>
    </select>

    <select id="depositPrice" parameterType="_int" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
        FROM TBL_PRODUCT
       WHERE PRODUCT_NAME LIKE '%' || '예금' || '%'
       <if test="price gte 0 and price lt 500">
           <![CDATA[
           AND PRODUCT_PRICE < #{ price }
           ]]>
       </if>
        <if test="price gte 500 and price lt 1000">
            AND PRODUCT_PRICE BETWEEN 500 AND #{ price }
        </if>
        <if test="price gte 1000 and price lt 1500">
            AND PRODUCT_PRICE BETWEEN 1000 AND #{ price }
        </if>
        <if test="price gte 1500 and price lte 2000">
            AND PRODUCT_PRICE BETWEEN 1500 AND #{ price }
        </if>
        <if test="price gt 2000">
            AND PRODUCT_PRICE BETWEEN 2000 AND #{ price }
        </if>
        ORDER BY PRODUCT_PRICE

    </select>
    
    <select id="maxInterestRate" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        <where>
            PRODUCT_NAME LIKE '%' || '예금' || '%'
        </where>
         ORDER BY PRODUCT_INTEREST_RATE DESC
    </select>

    <select id="selectInstallmentSavingAll" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        <where>
            PRODUCT_NAME LIKE '%' || '적금' || '%'
        </where>
    </select>

    <select id="installmentSavingPrice" parameterType="_int" resultMap="selectAllMenu">
        SELECT
              PRODUCT_CODE
            , PRODUCT_NAME
            , PRODUCT_INTEREST_RATE
            , CATEGORY_CODE
            , PRODUCT_PERIOD_YEAR
            , PRODUCT_AGE
            , PRODUCT_PRICE
         FROM TBL_PRODUCT
        WHERE PRODUCT_NAME LIKE '%' || '적금' || '%'
        <if test="price gte 0 and price lt 100">
            <![CDATA[
               AND PRODUCT_PRICE < #{ price }
               ]]>
        </if>
        <if test="price gte 100 and price lt 200">
            AND PRODUCT_PRICE BETWEEN 100 AND #{ price }
        </if>
        <if test="price gte 200 and price lt 300">
            AND PRODUCT_PRICE BETWEEN 200 AND #{ price }
        </if>
        <if test="price gte 300 and price lt 400">
            AND PRODUCT_PRICE BETWEEN 300 AND #{ price }
        </if>
        <if test="price gt 500">
            AND PRODUCT_PRICE BETWEEN 500 AND #{ price }
        </if>
        ORDER BY PRODUCT_PRICE
    </select>

    <select id="installmentSavingMaxInterestRate" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        <where>
            PRODUCT_NAME LIKE '%' || '적금' || '%'
        </where>
        ORDER BY PRODUCT_INTEREST_RATE DESC
    </select>

    <select id="selectLoanAll" resultMap="selectAllMenu">
        SELECT
              PRODUCT_CODE
            , PRODUCT_NAME
            , PRODUCT_INTEREST_RATE
            , CATEGORY_CODE
            , PRODUCT_PERIOD_YEAR
            , PRODUCT_AGE
            , PRODUCT_PRICE
         FROM TBL_PRODUCT
        <where>
            PRODUCT_NAME LIKE '%' || '대출' || '%'
        </where>
    </select>

    <select id="loanPrice" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        WHERE PRODUCT_NAME LIKE '%' || '대출' || '%'
        <if test="price gte 0 and price lt 2000">
            <![CDATA[
               AND PRODUCT_PRICE < #{ price }
               ]]>
        </if>
        <if test="price gte 2000 and price lt 4000">
            AND PRODUCT_PRICE BETWEEN 2000 AND #{ price }
        </if>
        <if test="price gte 4000 and price lt 6000">
            AND PRODUCT_PRICE BETWEEN 4000 AND #{ price }
        </if>
        <if test="price gte 6000">
            AND PRODUCT_PRICE BETWEEN 6000 AND #{ price }
        </if>
        ORDER BY PRODUCT_PRICE
    </select>

    <select id="loanMinInterestRate" resultMap="selectAllMenu">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        <where>
            PRODUCT_NAME LIKE '%' || '대출' || '%'
        </where>
        ORDER BY PRODUCT_INTEREST_RATE
    </select>
    <!--<select id="searchMenu" resultMap="selectAllMenu" parameterType="common.ConditionDTO">
        SELECT
               PRODUCT_CODE
             , PRODUCT_NAME
             , PRODUCT_INTEREST_RATE
             , CATEGORY_CODE
             , PRODUCT_PERIOD_YEAR
             , PRODUCT_AGE
             , PRODUCT_PRICE
          FROM TBL_PRODUCT
        <if test="condition == 'rate'">
            PRODUCT_INTEREST_RATE LIKE '%' || #{ value } || '%'
        </if>
        <if test="condition == 'age'">
            PRODUCT_AGE LIKE '%' || #{ value } || '%'
        </if>
        ORDER BY PRODUCT_INTEREST_RATE
    </select>-->



    <!-- 파라미터가 한 개인 경우 바인딩 되는 이름은 무엇을 작성해도 상관이 없다. 다만 의미적으로 맞춰서 code라고 작성한다.
         ex) parameterType 적을 때 mybatis규칙상 _쓰고 타입적기
         parameterType 속성은 optional이다.
         resultMap : 위에서 생성한 ResultMap을 리턴 타입으로 사용하는 경우
         resultType : 이미 정의 되어 있는 타입을 이용하여 리턴 타입으로 사용하는 경우 ex)java.util.date
         -->
   <!-- <select id="selectMenuByCode" parameterType="_int" resultMap="menuResultMap">
        SELECT
        MENU_CODE
        , MENU_NAME
        , MENU_PRICE
        , CATEGORY_CODE
        , ORDERABLE_STATUS
        FROM TBL_MENU
        WHERE MENU_CODE = #{ code }    &lt;!&ndash; #{} #과{ 사이는 띄우지 말기 {}안에 값은 DTO값과 일치해야한다. &ndash;&gt;
    </select>

    &lt;!&ndash;
    insert, update, delete의 경우 resultType은 작성하지 않고, 기본적으로 _int 로 수행 결과를 반환한다.
    파라미터로 전달 된 DTO의 필드명으로 값을 바인딩 해야 하며, getter를 내부적으로 이용하므로 getter가 없으면 에러가 발생한다.
    VALUES안에 #{} 안에 값들은 DTO 필드에 선언한 필드값과 일치해야한다.
     &ndash;&gt;
    <insert id="insertMenu" parameterType="com.ohgiraffers.section03.remix.MenuDTO">
        INSERT
        INTO TBL_MENU
        (
        MENU_CODE
        , MENU_NAME
        , MENU_PRICE
        , CATEGORY_CODE
        , ORDERABLE_STATUS
        )
        VALUES
        (
        SEQ_MENU_CODE.NEXTVAL
        , #{ name }
        , #{ price }
        , #{ categoryCode }
        , 'Y'
        )

    </insert>

    <update id="updateMenu" parameterType="com.ohgiraffers.section03.remix.MenuDTO">
        UPDATE
        TBL_MENU
        SET MENU_NAME = #{ name }
        , MENU_PRICE = #{ price }
        , CATEGORY_CODE = #{ categoryCode }
        WHERE MENU_CODE = #{ code }
    </update>

    <delete id="deleteMenu" parameterType="_int">
        DELETE
        FROM TBL_MENU
        WHERE MENU_CODE = #{ code }
    </delete>-->

</mapper>